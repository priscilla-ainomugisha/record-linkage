RECORD LINKING LOGIC
<<IMPLEMENTED IN THIS CLASS>>
WRITE UP

default_match: This method compares two names and returns True if they are exactly the same (case-insensitive).
similar_names: This method checks if two names are similar. Currently, it performs exact string matching (case-insensitive).
calculate_weights: This method iterates over each pair of records from dataset1 and dataset2, calculates weights based on default matches and similar names, and returns the weight matrix.
probabilistic_match: This method calculates the probabilities of matches and non-matches using the weights obtained from calculate_weights.
match_records: This method determines matches based on a given threshold applied to the probabilities of matches and non-matches.
The example usage provided demonstrates how to initialize the RecordLinkage class with two DataFrames, perform record linkage, and obtain matches based on the calculated probabilities.

<<CLASS CODE>>
import pandas as pd
import numpy as np
from itertools import product
from scipy.stats import norm
from metaphone import doublemetaphone

class RecordLinkage:
    def __init__(self, dataset1, dataset2, name_column):
        self.dataset1 = dataset1
        self.dataset2 = dataset2
        self.name_column = name_column
    
    def default_match(self, name1, name2):
        # Implement your default matching logic here
        # For example, you can use exact string matching, edit distance, etc.
        return name1 == name2
    
    def similar_names(self, name1, name2):
        # Implement your logic to check similarity between names
        # For example, you can use edit distance, phonetic encoding, etc.
        # For simplicity, let's use exact string matching as an example
        return name1.lower() == name2.lower()
    
    def calculate_weights(self):
        # Initialize arrays to store weights
        n = len(self.dataset1)
        m = len(self.dataset2)
        weights = np.zeros((n, m))

        # Iterate over each pair of records
        for i, j in product(range(n), range(m)):
            name1 = self.dataset1.iloc[i][self.name_column]
            name2 = self.dataset2.iloc[j][self.name_column]

            # Default match
            if self.default_match(name1, name2):
                weights[i][j] += 1
            
            # Similar names
            if self.similar_names(name1, name2):
                weights[i][j] += 0.5  # Adjust weight as needed
        
        return weights
    

    
    def probabilistic_match(self, weights):
        # Calculate probabilities using Fellegi-Sunter approach
        n = len(self.dataset1)
        m = len(self.dataset2)
        prob_match = np.zeros((n, m))
        prob_nonmatch = np.zeros((n, m))

        for i, j in product(range(n), range(m)):
            weight = weights[i][j]
            prob_match[i][j] = norm.pdf(weight, loc=1, scale=0.1)
            prob_nonmatch[i][j] = norm.pdf(weight, loc=0, scale=0.1)

        return prob_match, prob_nonmatch
    
    def match_records(self, threshold=0.5):
        # Calculate weights
        weights = self.calculate_weights()
        
        # Calculate probabilities
        prob_match, prob_nonmatch = self.probabilistic_match(weights)
        
        # Determine matches based on threshold
        matches = []
        n, m = prob_match.shape
        for i, j in product(range(n), range(m)):
            if prob_match[i][j] > threshold * prob_nonmatch[i][j]:
                matches.append((i, j))
        
        return matches

<<RESULTS>>
Search Results
Matches Found:
Match: Dukain Kafuko - Dukain Kafuko

Date of Birth:

Sex: 1 1

National ID: N_ID_6515 N_ID_6515

Pet Name: Achuma Achuma

Patient ID: 2589 2589

Visit Date: 02/02/2021 02/02/2021

HDSS ID:

HDSS HHID:

Match: Dukain Kafuko - Dukain Kafuko

Date of Birth:

Sex: 1 1

National ID: N_ID_6515 N_ID_9665

Pet Name: Achuma Achuma

Patient ID: 2589 3638

Visit Date: 02/02/2021 nan

HDSS ID:

HDSS HHID:

Match: Dukain Kafuko - Dukain Isabirye

Date of Birth:

Sex: 1 1

National ID: N_ID_6515 N_ID_11636

Pet Name: Achuma Nadduli

Patient ID: 2589 4292

Visit Date: 02/02/2021 07/02/2022

HDSS ID:

HDSS HHID:

Match: Dukain Kafuko - Dukain Kafuko

Date of Birth:

Sex: 1 1

National ID: N_ID_9665 N_ID_6515

Pet Name: Achuma Achuma

Patient ID: 3638 2589

Visit Date: nan 02/02/2021

HDSS ID:

HDSS HHID:

Match: Dukain Kafuko - Dukain Kafuko

Date of Birth:

Sex: 1 1

National ID: N_ID_9665 N_ID_9665

Pet Name: Achuma Achuma

Patient ID: 3638 3638

Visit Date: nan nan

HDSS ID:

HDSS HHID:

Match: Dukain Kafuko - Dukain Isabirye

Date of Birth:

Sex: 1 1

National ID: N_ID_9665 N_ID_11636

Pet Name: Achuma Nadduli

Patient ID: 3638 4292

Visit Date: nan 07/02/2022

HDSS ID:

HDSS HHID:

Match: Dukain Isabirye - Dukain Kafuko

Date of Birth:

Sex: 1 1

National ID: N_ID_11636 N_ID_6515

Pet Name: Nadduli Achuma

Patient ID: 4292 2589

Visit Date: 07/02/2022 02/02/2021

HDSS ID:

HDSS HHID:

Match: Dukain Isabirye - Dukain Kafuko

Date of Birth:

Sex: 1 1

National ID: N_ID_11636 N_ID_9665

Pet Name: Nadduli Achuma

Patient ID: 4292 3638

Visit Date: 07/02/2022 nan

HDSS ID:

HDSS HHID:

Match: Dukain Isabirye - Dukain Isabirye

Date of Birth:

Sex: 1 1

National ID: N_ID_11636 N_ID_11636

Pet Name: Nadduli Nadduli

Patient ID: 4292 4292

Visit Date: 07/02/2022 07/02/2022

HDSS ID:

HDSS HHID:
<<optimised one worked in like 30 minutes

